# Create customer data frame
custData = data.frame(name=c("Tom", "Sally", "Sue"),
age=c(43, 28, 35),
stringsAsFactors=F)
custData
# Get data in row 1 column 1
custData[1,1]
# Get all data in 1st row
custData[1,1:2]
# Get all ages
custData[1:3, 2]
# Get dimensions
dim(custData)
# Add another record
recordMark = data.frame(name="Mark", age=33)
custData = rbind(custData, recordMark)
custData
# Add a column representing debt
debt = c(0, 25.50, 36, 48.19)
custData = cbind(custData, debt)
custData
# Check if money is owed
owesMoney = custData[custData$debt > 0,]
owesMoney
# Create customer data frame
custData = data.frame(name=c("Tom", "Sally", "Sue"),
age=c(43, 28, 35),
stringsAsFactors=F)
# Repeat until a condition is met
num = 1
repeat{
print(num)
num = num + 1
if(num > 5){
# Jumps out of loop
break
}
}
while(num > 0){
num = num - 1
# next skips the rest of the loop and jumps
# back to the top
if(num %% 2 == 0){
next
}
print(num)
}
oneTo5 = 1:5
for (i in oneTo5){
print(i)
}
# Create a Matrix with a single column
matrix1 = matrix(data=c(1,2,3,4))
matrix1
# Create a matrix with defined rows and columns
matrix2 = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
matrix2
# You can also fill by row (You can use T or TRUE)
matrix3 = matrix(data=c(1,2,3,4), nrow=2, ncol=2, byrow=T)
matrix3
# Get a Matrix dimension
dim(matrix3)
# A value at row, column
matrix3[1,2]
# Get a whole row
matrix3[1,]
# Get a whole column
matrix3[,2]
# Combine vectors to make a Matrix
matrix4 = rbind(1:3, 4:6, 7:9)
matrix4
# Get 2nd and 3rd row
matrix4[2:3,]
# Get 2nd and 3rd row by ommitting the 1st
matrix4[-1,]
# Change the first value
matrix4[1,1] = 0
matrix4
# Change the 1st row
matrix4[1,] = c(10,11,12)
matrix4
# Create a MULTI-DIMENSIONAL ARRAYS with 2 rows, columns and layers
array1 = array(data=1:8, dim=c(2,2,2))
array1
# Get a value
array1[1,2,2]
# Create a function
getSum = function(num1, num2){
return(num1 + num2)
}
sprintf("5 + 6 = %d", getSum(5,6))
# If there is no return the last expression is returned
# You can define default attribute values
getDifference = function(num1=1, num2=1){
num1 - num2
}
sprintf("5 - 6 = %d", getDifference(5,6))
# Return multiple values in a list
makeList = function(theString){
return (strsplit(theString, " "))
}
makeList("Random Words")
# Handling missing arguments
missFunc = function(x){
if(missing(x)){
return("Missing Argument")
} else {
return(x)
}
}
missFunc()
# Excepting variable number of arguments with ellipses
getSumMore = function(...){
numList = list(...)
sum = 0
for(i in numList){
sum = sum + i
}
sum
}
getSumMore(1,2,3,4)
# Disposable / Anonymous Functions are great for
# quick operations like doubling everything in a list
numList = 1:10
dblList = (function(x) x * 2)(numList)
dblList
cubed = power(3)
cubed(2)
cubed(1:5)
power = function(exp){
function(x){
x ^ exp
}
}
cubed = power(3)
cubed(2)
cubed(1:5)
# You can store functions in lists
addFunc = list(
add2 = function(x) x + 2,
add3 = function(x) x + 3
)
addFunc$add2(5)
divide = function(num1, num2){
tryCatch(
num1 / num2,
error = function(e) {
if(is.character(num1) || is.character(num2)){
print("Can't Divide with Strings")
}
})
}
divide(10,"5")
# myPeople is a data frame
myPeople = read.table(file=file.choose(),
header=T, sep=" ",
na.strings="`",
stringsAsFactors=F)
myPeople
setwd("F:/python/ml-ai-dl/maths/r_crash")
# myPeople is a data frame
myPeople = read.table(file=file.choose(),
header=T, sep=" ",
na.strings="`",
stringsAsFactors=F)
myPeople
# Add another person
donnaRecord = data.frame(fname="Donna",
lname="Heyward",
sex="female")
myPeople = rbind(myPeople, donnaRecord)
# Update a record
myPeople[7,2] = "Smith"
# Update a record
myPeople[7,2] = "Smith"
getwd()
# myPeople is a data frame
myPeople = read.table(file=file.choose(),
header=T, sep=" ",
na.strings="`",
stringsAsFactors=F)
myPeople
# Add another person
donnaRecord = data.frame(fname="Donna",
lname="Heyward",
sex="female")
myPeople = rbind(myPeople, donnaRecord)
# Update a record
myPeople[7,2] = "Smith"
# Update the file by supplying the data.frame,
# the file to write, seperator, na, whether to
# quote strings, whether to include row numbers
write.table(x=myPeople, file=file.choose(),
sep=" ", na="`",
quote=F, row.names=F
# Update a record
myPeople[7,2] = "Smith"
