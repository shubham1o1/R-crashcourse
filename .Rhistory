# Get 1st 3 records
head(myPeople, 3)
# Get remaining records
tail(myPeople)
# Plotting x y coordinates from a matrix
# 1st 5 are x and 2nd 5 are y
xy1 = matrix(data=c(1,2,3,4,5,
1,2,3,4,5), nrow=5, ncol=5)
plot(xy1)
xy1 = matrix(data=c(1,2,3,4,5,
1,2,3,4,5), nrow=5, ncol=5)
plot(xy1)
xy1 = matrix(data=c(1,2,3,4,5,
1,2,3,4,5), nrow=5, ncol=5)
plot(xy1)
# Draw a line
x2 = c(1,2,3,4,5)
y2 = c(1,2,3,4,5)
plot(x2, y2, type="l")
# Draw a line
x2 = c(1,2,3,4,5)
y2 = c(1,2,3,4,5)
plot(x2, y2, type="l")
# Points and lines
plot(x2, y2, type="b")
# Points and lines with no space around points,
# labels, a blue line (Find more with colors())
plot(x2, y2, type="o",
main="My Plot", xlab="x axis", ylab="y axis",
col="steelblue")
# pch (1-25) defines different points
# lty (1-6) defines different lines
# xlim defines the max and min x plotting region
# ylim defines the max and min y plotting region
plot(x2, y2, type="b", pch=2, lty=2,
xlim=c(-8,8), ylim=c(-8,8))
# pch (1-25) defines different points
# lty (1-6) defines different lines
# xlim defines the max and min x plotting region
# ylim defines the max and min y plotting region
plot(x2, y2, type="b", pch=2, lty=2,
xlim=c(-8,8), ylim=c(-8,8))
# pch (1-25) defines different points
# lty (1-6) defines different lines
# xlim defines the max and min x plotting region
# ylim defines the max and min y plotting region
plot(x2, y2, type="b", pch=2, lty=2,
main="My Plot", xlab="x axis", ylab="y axis",
xlim=c(-8,8), ylim=c(-8,8))
# Multiple plots
plot(x2, y2, type="b")
# Multiple plots
plot(x2, y2, type="b")
# Adds straight lines at 2 and 4 coordinates
abline(h=c(2,4), col="red",lty=2)
# Multiple plots
plot(x2, y2, type="b")
# Adds straight lines at 2 and 4 coordinates
abline(h=c(2,4), col="red",lty=2)
# Draw a 2 segmented lines with starting and ending x
# and y points
segments(x0=c(2,4), y0=c(2,2), x1=c(2,4), y1=c(4,4),
col="red",lty=2)
# Draw an arrow
arrows(x0=1.5, y0=4.55, x1=2.7, y1=3.3, col="blue")
# Print Text
text(x=1.25, y=4.75, labels="Center")
# Load a built in data.frame
plot(faithful)
# Highlight eruptions with a waiting time greater than 4
eruptions4 = with(faithful, faithful[eruptions > 4,])
# Draw specific points
points(eruptions4, col="red", pch=3)
# Load a built in data.frame
plot(faithful)
# Highlight eruptions with a waiting time greater than 4
eruptions4 = with(faithful, faithful[eruptions > 4,])
# Load a built in data.frame
plot(faithful)
# Highlight eruptions with a waiting time greater than 4
eruptions4 = with(faithful, faithful[eruptions > 4,])
# Draw specific points
points(eruptions4, col="red", pch=3)
sqrt(x=100)
# Get the power you raise the base to get x
log(x=4, base=2)
# Euler's number 2.718 to the power of x
exp(x=2)
# Sum all vector values
sum(c(1,2,3))
# Find the mean (average)
randD1 = c(1,5,6,7,10,16)
mean(randD1)
# The median (Middle Number or avg of middle 2)
median(randD1)
# Minimum value
min(randD1)
# Maximum value
max(randD1)
# Min and max
range(randD1)
# Rounding
ceiling(4.5)
floor(4.5)
# Cumulatives
cumsum(c(1,2,3))
cumprod(c(1,2,3))
cummax(c(7:9, 4:6, 1:3))
cummin(c(4:6, 1:3, 7:9))
# Generating Random samples
# Flipping a coin 10 times and weigh the probability
# of the next flip based on the previous
sample(0:1,10,replace=T)
sample(1:20,10,replace=T)
sqrt(x=100)
# Get the power you raise the base to get x
log(x=4, base=2)
# Euler's number 2.718 to the power of x
exp(x=2)
# Sum all vector values
sum(c(1,2,3))
# Find the mean (average)
randD1 = c(1,5,6,7,10,16)
mean(randD1)
# The median (Middle Number or avg of middle 2)
median(randD1)
# Minimum value
min(randD1)
# Maximum value
max(randD1)
# Min and max
range(randD1)
# Rounding
ceiling(4.5)
floor(4.5)
# Cumulatives
cumsum(c(1,2,3))
cumprod(c(1,2,3))
cummax(c(7:9, 4:6, 1:3))
cummin(c(4:6, 1:3, 7:9))
# Generating Random samples
# Flipping a coin 10 times and weigh the probability
# of the next flip based on the previous
sample(0:1,10,replace=T)
sample(1:20,10,replace=T)
sqrt(x=100)
log(x=4, base=2)
# Euler's number 2.718 to the power of x
exp(x=2)
# Sum all vector values
sum(c(1,2,3))
# Find the mean (average)
randD1 = c(1,5,6,7,10,16)
mean(randD1)
# The median (Middle Number or avg of middle 2)
median(randD1)
# Minimum value
min(randD1)
# Maximum value
max(randD1)
# Min and max
range(randD1)
# Rounding
ceiling(4.5)
floor(4.5)
# Cumulatives
cumsum(c(1,2,3))
cumprod(c(1,2,3))
cummax(c(7:9, 4:6, 1:3))
cummin(c(4:6, 1:3, 7:9))
# Generating Random samples
# Flipping a coin 10 times and weigh the probability
# of the next flip based on the previous
sample(0:1,10,replace=T)
sample(1:20,10,replace=T)
# ----- MATH FUNCTIONS -----
sqrt(x=100)
# Get the power you raise the base to get x
log(x=4, base=2)
# Euler's number 2.718 to the power of x
exp(x=2)
# Sum all vector values
sum(c(1,2,3))
# Find the mean (average)
randD1 = c(1,5,6,7,10,16)
mean(randD1)
# The median (Middle Number or avg of middle 2)
median(randD1)
# Minimum value
min(randD1)
# Maximum value
max(randD1)
# Min and max
range(randD1)
# Rounding
ceiling(4.5)
floor(4.5)
# Cumulatives
cumsum(c(1,2,3))
cumprod(c(1,2,3))
cummax(c(7:9, 4:6, 1:3))
cummin(c(4:6, 1:3, 7:9))
# Generating Random samples
# Flipping a coin 10 times and weigh the probability
# of the next flip based on the previous
sample(0:1,10,replace=T)
sample(1:20,10,replace=T)
# # ----- PIE CHARTS -----
# # List percentages
# foodPref = c(15, 35, 10, 25, 15)
#
# # Labels associated with percentages
# foodLabels = c("Spaghetti", "Pizza", "Mac n' Cheese",
#                "Chicken Nuggets", "Tacos")
#
# # Where to save the image
# png(file="child_food_pref.png")
#
# # Colors used for each option
# colors = rainbow(length(foodPref))
#
# # Create the chart
# pie(foodPref, foodLabels, main="Food Prefs",
#     col=colors)
#
# # Print legend and cex shrinks the size
# legend("topright", c("Spaghetti", "Pizza", "Mac n' Cheese",
#                      "Chicken", "Tacos"), cex=0.8,
#        fill=colors)
#
# # Save the chart
# dev.off()
#
# # 3D Pie Chart
# # Download package in console install.packages("plotrix")
# # Get the library
# library(plotrix)
#
# # Name the chart file
# png(file="3d_child_food_pref.png")
#
# # Create the chart
# pie3D(foodPref, labels=foodLabels, explode=0.1,
#       start=pi/2, main="Food Prefs", labelcex=0.8)
#
# # Save the chart
# dev.off()
#
# # ----- BAR CHARTS -----
# # Define the bar chart file
# png(file="food_pref_bar_chart.png")
#
# # Plot the chart
# barplot(foodPref, names.arg=foodLabels, xlab="Votes",
#         ylab="Food Options", col=colors,
#         main="Food Prefs")
#
# # Save File
# dev.off()
#
# # ----- REGRESSION ANALYSIS -----
# # Used to study a relationship between 2 separate
# # pieces of data (What is the relation between batting
# # average and RBIS)
#
# # Create relationship model between AVG and RBIs
# relation = lm(playerData$RBI~playerData$AVG)
#
# # Create file
# png(file="RBI_AVG_Regression.png")
#
# # Plot the chart
# plot(playerData$AVG, playerData$RBI,
#      main="AVG & RBI Regression",
#      abline(lm(playerData$RBI~playerData$AVG)),
#      xlab="AVG", ylab="RBIs")
#
# # Save chart
# dev.off()
#
# # ----- MULTIPLE REGRESSION -----
# # Used to study the impact on one variable from numerous
# # others
# # Estimate RBIs based on other player stats
# playerData2 = mlbPlayers[,c("RBI","AVG","HR","OBP",
#                             "SLG","OPS")]
#
# # Create the relationship model
# relation2 = lm(playerData2$RBI ~ playerData2$AVG +
#                  playerData2$HR + playerData2$OBP +
#                  playerData2$SLG + playerData2$OPS)
#
# sprintf("Intercept : %f1.4", coef(relation2)[1])
#
# # How stats effect RBIs
# sprintf("AVG : %f1.4", coef(relation2)[2])
# sprintf("HR : %f1.4", coef(relation2)[3])
# sprintf("OBP : %f1.4", coef(relation2)[4])
# sprintf("SLG : %f1.4", coef(relation2)[5])
# sprintf("OPS : %f1.4", coef(relation2)[6])
#
# # Calculate expected RBIs based on stats
# # Evan Longoria
# # RBIs   AVG   HR   OBP   SLG   OPS
# # 86     .261  20  .313  .424  .737
# RBIGuess = -5.05 + (372.96 * .261) + (2.56 * 20) +
#   (-5.41 * .313) + (-167.37 * .424)
# RBIGuess
clea
cls
clear()
clearPushBack()
sqrt(x=100)
# Get the power you raise the base to get x
log(x=4, base=2)
# Euler's number 2.718 to the power of x
exp(x=2)
# Sum all vector values
sum(c(1,2,3))
# Find the mean (average)
randD1 = c(1,5,6,7,10,16)
mean(randD1)
# The median (Middle Number or avg of middle 2)
median(randD1)
# Minimum value
min(randD1)
# Maximum value
max(randD1)
# Min and max
range(randD1)
# Rounding
ceiling(4.5)
floor(4.5)
# Cumulatives
cumsum(c(1,2,3))
cumprod(c(1,2,3))
cummax(c(7:9, 4:6, 1:3))
cummin(c(4:6, 1:3, 7:9))
# Generating Random samples
# Flipping a coin 10 times and weigh the probability
# of the next flip based on the previous
sample(0:1,10,replace=T)
sample(1:20,10,replace=T)
# List percentages
foodPref = c(15, 35, 10, 25, 15)
# Labels associated with percentages
foodLabels = c("Spaghetti", "Pizza", "Mac n' Cheese",
"Chicken Nuggets", "Tacos")
# Where to save the image
png(file="child_food_pref.png")
# Colors used for each option
colors = rainbow(length(foodPref))
# Create the chart
pie(foodPref, foodLabels, main="Food Prefs",
col=colors)
# Print legend and cex shrinks the size
legend("topright", c("Spaghetti", "Pizza", "Mac n' Cheese",
"Chicken", "Tacos"), cex=0.8,
fill=colors)
# Save the chart
dev.off()
# 3D Pie Chart
# Download package in console install.packages("plotrix")
# Get the library
library(plotrix)
# Name the chart file
png(file="3d_child_food_pref.png")
# Create the chart
pie3D(foodPref, labels=foodLabels, explode=0.1,
start=pi/2, main="Food Prefs", labelcex=0.8)
# Save the chart
dev.off()
# List percentages
foodPref = c(15, 35, 10, 25, 15)
# Labels associated with percentages
foodLabels = c("Spaghetti", "Pizza", "Mac n' Cheese",
"Chicken Nuggets", "Tacos")
# Where to save the image
png(file="child_food_pref.png")
# Colors used for each option
colors = rainbow(length(foodPref))
# Create the chart
pie(foodPref, foodLabels, main="Food Prefs",
col=colors)
# Print legend and cex shrinks the size
legend("topright", c("Spaghetti", "Pizza", "Mac n' Cheese",
"Chicken", "Tacos"), cex=0.8,
fill=colors)
# Save the chart
dev.off()
install.packages(plotrix)
install.packages("plotrix")
# 3D Pie Chart
# Download package in console install.packages("plotrix")
# Get the library
library(plotrix)
# Name the chart file
png(file="3d_child_food_pref.png")
# Create the chart
pie3D(foodPref, labels=foodLabels, explode=0.1,
start=pi/2, main="Food Prefs", labelcex=0.8)
# Save the chart
dev.off()
png(file="food_pref_bar_chart.png")
# Plot the chart
barplot(foodPref, names.arg=foodLabels, xlab="Votes",
ylab="Food Options", col=colors,
main="Food Prefs")
# Save File
dev.off()
# ----- REGRESSION ANALYSIS -----
# Used to study a relationship between 2 separate
# pieces of data (What is the relation between batting
# average and RBIS)
# Create relationship model between AVG and RBIs
relation = lm(playerData$RBI~playerData$AVG)
# Create file
png(file="RBI_AVG_Regression.png")
# Plot the chart
plot(playerData$AVG, playerData$RBI,
main="AVG & RBI Regression",
abline(lm(playerData$RBI~playerData$AVG)),
xlab="AVG", ylab="RBIs")
# Save chart
dev.off()
# Used to study a relationship between 2 separate
# pieces of data (What is the relation between batting
# average and RBIS)
#pulling in the data
mlbPlayers = read.table(file=file.choose(),
header=T, sep=" ",
na.strings="`",
stringsAsFactors=F)
# Create relationship model between AVG and RBIs
relation = lm(playerData$RBI~playerData$AVG)
# Create file
png(file="RBI_AVG_Regression.png")
# Plot the chart
plot(playerData$AVG, playerData$RBI,
main="AVG & RBI Regression",
abline(lm(playerData$RBI~playerData$AVG)),
xlab="AVG", ylab="RBIs")
# Save chart
dev.off()
# ----- REGRESSION ANALYSIS -----
# Used to study a relationship between 2 separate
# pieces of data (What is the relation between batting
# average and RBIS)
#pulling in the data
mlbPlayers = read.table(file=file.choose(),
header=T, sep=" ",
na.strings="`",
stringsAsFactors=F)
#Calculate the average and RBI out of the data
playerData = mlbPlayers[,c("RBI","AVG")]
# Create relationship model between AVG and RBIs
relation = lm(playerData$RBI~playerData$AVG)
# Create file
png(file="RBI_AVG_Regression.png")
# Plot the chart
plot(playerData$AVG, playerData$RBI,
main="AVG & RBI Regression",
abline(lm(playerData$RBI~playerData$AVG)),
xlab="AVG", ylab="RBIs")
# Save chart
dev.off()
# ----- REGRESSION ANALYSIS -----
# Used to study a relationship between 2 separate
# pieces of data (What is the relation between batting
# average and RBIS)
#pulling in the data
mlbPlayers = read.table(file=file.choose(),
header=T, sep=" ",
na.strings="`",
stringsAsFactors=F)
#Calculate the average and RBI out of the data
playerData = mlbPlayers[,c("RBI","AVG")]
# Create relationship model between AVG and RBIs
relation = lm(playerData$RBI~playerData$AVG)
# Create file
png(file="RBI_AVG_Regression.png")
# Plot the chart
plot(playerData$AVG, playerData$RBI,
main="AVG & RBI Regression",
abline(lm(playerData$RBI~playerData$AVG)),
xlab="AVG", ylab="RBIs")
# Save chart
dev.off()
# ----- MULTIPLE REGRESSION -----
# Used to study the impact on one variable from numerous
# others
# Estimate RBIs based on other player stats
playerData2 = mlbPlayers[,c("RBI","AVG","HR","OBP",
"SLG","OPS")]
# Create the relationship model
relation2 = lm(playerData2$RBI ~ playerData2$AVG +
playerData2$HR + playerData2$OBP +
playerData2$SLG + playerData2$OPS)
sprintf("Intercept : %f1.4", coef(relation2)[1])
# How stats effect RBIs
sprintf("AVG : %f1.4", coef(relation2)[2])
sprintf("HR : %f1.4", coef(relation2)[3])
sprintf("OBP : %f1.4", coef(relation2)[4])
sprintf("SLG : %f1.4", coef(relation2)[5])
sprintf("OPS : %f1.4", coef(relation2)[6])
# Calculate expected RBIs based on stats
# Evan Longoria
# RBIs   AVG   HR   OBP   SLG   OPS
# 86     .261  20  .313  .424  .737
RBIGuess = -5.05 + (372.96 * .261) + (2.56 * 20) +
(-5.41 * .313) + (-167.37 * .424)
RBIGuess
